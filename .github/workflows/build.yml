name: Kernel Build 4.14

on:
  workflow_dispatch:
    inputs:
      KERNEL_REPO:
        description: 'KERNEL_REPO'
        required: true
        default: 'https://github.com/mtkpapa/kernel-mtk'
      KERNEL_BRANCH:
        description: 'KERNEL_BRANCH'
        required: true
        default: 's'
      KERNEL_DEFCONFIG:
        description: 'KERNEL_DEFCONFIG'
        required: true
        default: 'rosemary_defconfig'
      BOOT_IMG_URL:
        description: 'BOOT_IMG_URL'
        required: true
        default: 'https://github.com/Zonkerus/Rosemary_KernelSU-Next_SUSFS_4.14/releases/download/boot/twn_boot.img'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

    - name: №1
      uses: pierotofy/set-swap-space@v1.0
      with:
        swap-size-gb: 16

    - name: №2
      run: |
        mkdir -p $GITHUB_WORKSPACE/project/clang
        CLANG_URL=$(curl -Ls https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt)
        aria2c $CLANG_URL
        tar -C $GITHUB_WORKSPACE/project/clang/ -zxf ${CLANG_URL##*/}

    - name: №3
      run: |
        cd $GITHUB_WORKSPACE/project
        git clone -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.event.inputs.KERNEL_REPO }} linux --recurse-submodules --depth=1
        git clone -b master https://github.com/Zonkerus/AnyKernel3 AnyKernel3 --depth=1

    - name: №4
      run: |
        LATEST_URL=$(curl -s https://api.github.com/repos/ccache/ccache/releases/latest | jq -r '.assets[] | select(.name | endswith("linux-x86_64.tar.xz")) | .browser_download_url')

        if [ -z "$LATEST_URL" ] || [ "$LATEST_URL" = "null" ]; then
          echo "::error::Could not find the latest ccache download URL. Aborting."
          exit 1
        fi

        echo "Latest ccache download URL: ${LATEST_URL}"

        aria2c "$LATEST_URL" -o ccache-latest.tar.xz

        tar -xf ccache-latest.tar.xz

        sudo mv ccache-*-linux-x86_64/ccache /usr/local/bin/

        rm -f ccache-latest.tar.xz
        rm -rf ccache-*-linux-x86_64

    - name: №5
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ runner.os }}-kernel-${{ github.event.inputs.KERNEL_BRANCH }}-${{ github.event.inputs.KERNEL_DEFCONFIG }}
        max-size: 50G
        variant: ccache

    - name: №6
      run: |
        PATH=$GITHUB_WORKSPACE/project/clang/bin:$PATH

        cd $GITHUB_WORKSPACE/project/linux
        echo "-Zonkerus" > localversion
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs

        make O=out ARCH=arm64 ${{ github.event.inputs.KERNEL_DEFCONFIG }}

        scripts/config --file out/.config -e KSU \
          -e KSU_SUSFS_HAS_MAGIC_MOUNT \
          -e KSU_SUSFS_SUS_PATH \
          -e KSU_SUSFS_SUS_MOUNT \
          -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
          -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT \
          -e KSU_SUSFS_SUS_KSTAT \
          -e KSU_SUSFS_SUS_OVERLAYFS \
          -e KSU_SUSFS_TRY_UMOUNT \
          -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
          -e KSU_SUSFS_SPOOF_UNAME \
          -e KSU_SUSFS_ENABLE_LOG \
          -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
          -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
          -e KSU_SUSFS_OPEN_REDIRECT \
          -e KSU_SUSFS_SUS_SU

        make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CC="ccache clang" LLVM=1 LLVM_IAS=1 LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC="ccache clang" HOSTCXX="ccache clang++" KCFLAGS=-Wno-default-const-init-var-unsafe -j$(nproc --all)
        
        cp out/arch/arm64/boot/Image.gz-dtb $GITHUB_WORKSPACE/project/Image.gz-dtb

    - name: №7
      run: |
        cd $GITHUB_WORKSPACE/project/AnyKernel3
        cp $GITHUB_WORKSPACE/project/Image.gz-dtb Image.gz-dtb
        zip -r9 $GITHUB_WORKSPACE/project/AnyKernel3.zip -- *

    - name: №8
      run: |
        cd $GITHUB_WORKSPACE/project

        MAGISK_URL=$(curl -sL "https://api.github.com/repos/topjohnwu/Magisk/releases/latest" | grep "browser_download_url" | grep ".apk" | cut -d '"' -f 4)

        aria2c "$MAGISK_URL" -o Magisk.apk

        unzip -j Magisk.apk "lib/x86_64/libmagiskboot.so" -d .
        mv libmagiskboot.so magiskboot
        chmod +x magiskboot

        aria2c "${{ github.event.inputs.BOOT_IMG_URL }}" -o boot.img

        ./magiskboot unpack boot.img
        rm -f kernel kernel_dtb
        mv Image.gz-dtb kernel
        ./magiskboot repack boot.img
        rm -f boot.img
        mv new-boot.img ksu_boot.img

    - name: №9
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3
        path: ${{ github.workspace }}/project/AnyKernel3.zip

    - name: №10
      uses: actions/upload-artifact@v4
      with:
        name: Boot
        path: ${{ github.workspace }}/project/ksu_boot.img
